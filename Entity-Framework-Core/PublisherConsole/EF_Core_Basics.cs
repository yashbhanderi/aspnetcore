namespace PublisherConsole {
	class EF_Core_Basics {

		// TODO::: Migrations

		//! :::Add-Migrations
		// Convert Model -> Migration File

		//! Migrations File to Database : Two ways

		//? ::: 1) Update-Migration
		// COnvert Migration -> SQL Query -> Execute Query

		//? ::: 2) Script-Migrations
		// -> It will convert all migrations file into SQL Query
		// -> Not latest migrations !!! But all the migrations
		// -> WHether table is already created or not.
		// -> You want to examine the SQL script that would be generated by a migration without actually applying it to the database. This can be useful for reviewing the changes or debugging potential issues.

		//TODO ::: Retrive the Data || Convert into List of C# Objects 

		//? ToList(), FirstOrDefault()
		//var authors = context.Authors.ToList();

		//TODO ::: Only get data which has books property
		//var authors = context.Authors.Include(a => a.Books).ToList();

		//TODO ::: Filtering
		//var authors = context.Authors.Where(a => a.FirstName.Contains("m") && a.LastName.Contains("m")).ToList();

		//TODO ::: Sorting
		//var authors = context.Authors
		//				.OrderBy(a => a.LastName)
		//				//.OrderBy(a => a.FirstName)	<---- Don't USE THIS !!!
		//				.ThenBy(a => a.FirstName)
		//				.ToList();

		//foreach (var a in authors) {
		//	Console.WriteLine(a.ToString());
		//}


		//TODO ::: Updating Object

		// -> Fetch the object
		// -> Update it's values
		// -> _context.SaveChanges();

		//TODO ::: Deleting Object

		// _context.Authors.Remove(object);

		//TODO ::: Tracking changes and ChangeTracker Object


		//var authors = context.Authors.Where(a => a.FirstName.StartsWith("m")).ToList();

		//foreach (var a in authors) {
		//	a.LastName += " Updated";
		//}

		//Console.WriteLine("Before Update\n" + context.ChangeTracker.DebugView.LongView);

		//// Internally Calls SaveChanges()
		//context.ChangeTracker.DetectChanges();	


		//Console.WriteLine("After Update\n" + context.ChangeTracker.DebugView.LongView);

	}
}
